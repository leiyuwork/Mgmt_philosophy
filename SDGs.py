import pandas as pd  # excel data操作要パッケージを導入

# 顧客、株主、従業員、地域社会　各ステークホルダー群のキーワードを特定
sh_dic_SDGs1 = ["基礎的サービスへのアクセス", "社会保護制度", "脆弱な状況", "貧困", "平等な権利", "貧困撲滅", "後発開発途上国", "貧困層", "脆弱層"]
sh_dic_SDGs2 = ["ドーハ開発ラウンド", "遺伝的多様性", "栄養ニーズ", "栄養不良", "家族農家", "気象現象", "飢餓", "漁業者", "近縁野生種", "公正", "衡平な", "高齢者",
                "栽培植物", "災害", "飼育・家畜化された動物", "持続可能な", "若年女子", "種子", "種子・植物バンク", "授乳婦", "女性", "小規模食料生産者", "消耗性疾患",
                "植物・家畜のジーン・バンク", "食料", "食料価格", "食料市場", "食料生産システム", "食料備蓄", "知識へのアクセス", "土壌", "妊婦", "農業", "農業研究",
                "農業生産性", "農業生産能力向上", "農産物市場", "農産物輸出補助金", "農村インフラ", "配分", "発育阻害", "平等なアクセス", "牧畜民", "後発開発途上国", "貧困層",
                "気候変動", "遺伝資源", "干ばつ", "洪水", "生態系", "開発途上国", "先住民", "脆弱な立場"]
sh_dic_SDGs3 = ["エイズ", "たばこの規制", "ドーハ宣言", "マラリア", "ユニバーサル・ヘルス・カバレッジ", "ワクチン", "医薬品", "家族計画", "感染症", "感染性", "肝炎", "結核",
                "健康", "健康危険因子", "公衆の健康", "公衆衛生保護", "死傷者", "死亡", "治療", "疾病", "若年死亡率", "新生児死亡率", "水質汚染", "世界保健機関", "生殖",
                "精神保健", "大気汚染", "伝染病", "土壌汚染", "道路交通事故", "妊産婦の死亡率", "熱帯病", "非感染性疾患", "福祉", "物質乱用", "保健サービス", "保健財政",
                "保健人材", "防止・治療", "薬物乱用", "有害な摂取", "有害化学物質", "予防", "予防可能な死亡", "TRIPS 協定", "開発途上国"]
sh_dic_SDGs4 = ["アフリカ諸国職業訓練", "グローバル・シチズンシップ", "ジェンダー", "ジェンダー格差", "学習環境", "学習者", "学習成果", "起業に必要な技能", "技術・工学・科学プログラム",
                "技術教育・職業教育", "技術的スキル", "技能", "教育", "教育施設", "教員研修", "計算能力", "貢献の理解", "高等教育", "国際協力", "子ども", "質の高い教員",
                "就学前教育", "初等教育", "奨学金", "障害", "障害者", "情報通信技術（ICT）", "職業的スキル", "人権", "男女の平等", "知識", "中等教育", "読み書き能力",
                "乳幼児の発達・ケア", "非暴力的", "文化の持続可能な開発", "文化多様性", "平和", "包摂的", "後発開発途上国", "脆弱層", "開発途上国", "先住民", "脆弱な立場", "小島嶼開発途上国", "職業訓練", "人間らしい仕事", "働きがいのある"]
sh_dic_SDGs5 = ["国際人口・開発会議（ICPD）", "ジェンダー平等", "強制結婚", "差別", "女性の権利", "女性の参画", "女性の能力", "女性の能力強化", "女性器切除",
                "性と生殖に関する健康及び権利", "性的搾取", "責任分担", "早期結婚", "平等なリーダーシップ", "北京行動綱領", "未成年者の結婚", "無報酬の育児", "無報酬の家事労働",
                "無報酬の介護", "搾取", "暴力", "人身売買"]
sh_dic_SDGs6 = ["リサイクル・再利用技術", "安価な飲料水", "安全な飲料水", "安全な再利用", "飲料水", "衛生施設", "汚染の減少", "下水施設", "河川", "海水淡水化", "湖沼",
                "国境を越えた協力", "再生利用", "山地", "湿地", "集水", "森林", "水と衛生の管理", "水に関連する生態系", "水の効率的利用", "水資源", "水質", "水不足",
                "水利用", "帯水層", "淡水", "投棄の廃絶", "排水", "排水処理", "野外での排泄", "有害な化学物", "有害な物質", "開発途上国", "脆弱な立場"]
sh_dic_SDGs7 = ["エネルギー関連インフラ", "エネルギー効率", "クリーンエネルギー", "化石燃料技術", "環境負荷の低い", "現代的エネルギーサービス", "現代的なエネルギーサービス",
                "再生可能エネルギー", "持続可能なエネルギーサービス", "世界のエネルギーミックス"]
sh_dic_SDGs8 = ["イノベーション", "イノベーションを支援する", "安心な労働環境", "安全な労働環境", "一人当たり経済成長率", "環境悪化", "技術向上", "強制労働", "金融サービスへのアクセス",
                "金融機関の能力", "銀行取引へのアクセス", "経済生産性", "雇用創出", "国際労働機関（ILO）", "産品販促", "資源効率", "児童兵士", "児童労働", "持続可能な消費",
                "持続可能な生産", "若年雇用", "就学", "就労", "多様化", "地方の文化振興", "中小零細企業の成長", "中小零細企業の設立", "奴隷制", "同一労働同一賃金",
                "不安定な雇用状態", "保険へのアクセス", "貿易関連技術支援", "労働者の権利", "職業訓練", "人間らしい仕事", "働きがいのある", "人身売買", "移住労働者", "持続可能な観光業"]
sh_dic_SDGs9 = ["イノベーションを促進", "インターネット・アクセス", "クリーン技術", "安価で公平なアクセス", "安価な資金貸付", "科学研究の促進", "開発途上国における強靱（レジリエント）なインフラ",
                "開発途上国における持続可能なインフラ", "官民研究開発の支出", "環境に配慮した", "技術開発", "技術能力の向上", "金融・テクノロジー・技術", "経済発展", "研究開発従事者数",
                "研究及びイノベーション", "産業の多様化", "資源利用効率の向上", "持続可能な産業化", "小規模の製造業", "情報通信技術へのアクセス", "人間の福祉", "付加価値創造",
                "包摂的産業化"]
sh_dic_SDGs10 = ["移住", "移民政策", "海外直接投資", "開発途上国の参加", "開発途上国の発言力", "機会均等", "金融市場と金融機関に対する規制とモニタリング", "経済的包含", "社会的包含",
                 "所得成長率", "世界貿易機関（WTO）協定", "成果の不平等", "政治的包含", "政府開発援助（ODA）", "送金コスト", "送金経路", "平等の拡大", "移住労働者"]
sh_dic_SDGs11 = ["スラム", "基本的サービスへのアクセスを確保", "気候変動の緩和と適応", "強靱（レジリエント）な建造物", "交通の安全性改善", "公共スペース", "公共交通機関の拡大",
                 "災害に対する強靱さ", "持続可能な建造物", "持続可能な都市化", "持続可能な輸送システム", "自然遺産", "住宅サービスへのアクセスを確保", "人間居住計画", "水関連災害",
                 "大気の質", "都市部、都市周辺部及び農村部間の良好なつながり", "廃棄物の管理", "被災者", "文化遺産", "包摂的都市化", "緑地", "貧困層", "脆弱な立場"]
sh_dic_SDGs12 = ["10年計画枠組み（10YFP）", "ライフスタイル", "化学物質", "化石燃料に対する非効率な補助金", "科学的能力", "技術的能力", "市場のひずみ", "持続可能な公共調達の慣行",
                 "持続可能性に関する情報", "自然と調和", "収穫後損失", "食品ロス", "食料の廃棄", "水への放出", "大気への放出", "天然資源の持続可能な管理", "土壌への放出", "廃棄物",
                 "有害な補助金", "浪費的な消費"]
sh_dic_SDGs13 = ["UNFCCC", "気候関連災害", "気候基金", "気候変動関連", "気候変動対策", "自然災害に対する強靱性", "疎外", "後発開発途上国", "気候変動", "小島嶼開発途上国"]
sh_dic_SDGs14 = ["ユネスコ政府間海洋学委員会", "違法漁業", "沿岸生態系", "沿岸保全", "沿岸零細漁業者", "過剰漁獲", "過剰漁獲能力", "我々の求める未来", "海域保全", "海洋ごみ",
                 "海洋の健全性", "海洋汚染", "海洋技術", "海洋酸性化", "海洋資源", "海洋生物多様性", "海洋法", "漁業", "漁業補助金", "国際連合条約（UNCLOS）", "小規模漁業者",
                 "水産資源", "水産養殖", "生態系の回復", "生物学的特性", "破壊的な漁業慣行", "富栄養化", "無規制漁業", "無報告漁業", "海洋生態系"]
sh_dic_SDGs15 = ["違法な取引", "違法な野生生物製品", "違法取引", "外来種の侵入", "砂漠化", "再植林", "山地生態系", "持続的な生計機会", "自然生息地", "新規植林", "森林経営",
                 "森林減少", "生態系の保全", "生物多様性", "絶滅危惧種", "地域コミュニティ", "土壌回復", "土地劣化", "動植物種の密猟", "内陸淡水生態系", "貧困削減", "保護種の密猟",
                 "保全", "優先種", "陸域生態系", "海洋生態系", "遺伝資源", "干ばつ", "洪水", "生態系"]
sh_dic_SDGs16 = ["グローバル・ガバナンス", "テロリズム", "違法な資金", "汚職", "基本的自由", "虐待", "公共機関", "拷問", "参加型意思決定", "司法", "出生登録",
                 "情報へのアクセス", "身分証明", "説明責任", "組織犯罪", "贈賄", "対応的な意思決定", "代表的な意思決定", "透明性の高い", "犯罪", "非差別的な政策", "非差別的な法規",
                 "武器の取引", "包摂的な意思決定", "法の支配", "暴力の防止", "開発途上国", "搾取", "暴力"]
sh_dic_SDGs17 = ["GDP以外の尺度", "ODA", "ドーハ・ラウンド（DDA）交渉", "パートナーシップ", "マクロ経済の安定", "マルチステークホルダー", "リーダーシップ",
                 "科学技術イノベーション（STI）", "科学技術イノベーション能力", "課税", "環境に配慮した技術", "技術バンク", "協調的な政策", "後発開発途上国からの輸入",
                 "後発開発途上国のシェア", "国家計画", "債務", "債務リスク", "三角協力", "重債務貧困国（HIPC）", "譲許的", "世界の輸出", "世界貿易機関（WTO）", "政策",
                 "政策の一貫性", "政策協調", "多角的貿易体制", "徴税能力", "追加的資金源", "投資促進", "統計", "特恵的な原産地規則", "特恵的条件", "南南協力", "南北協力",
                 "非集計型データ", "貧困撲滅", "後発開発途上国", "開発途上国", "小島嶼開発途上国"]

IS_data = pd.DataFrame(pd.read_excel(r"C:\Users\Ray94\Downloads\結果＿ステークホルダー言及順.xlsx"))  # 経営理念記載の作業用excelを読み込む（全社分）
Item_value = IS_data.loc[:, ['記載内容']].values.tolist()  # 経営理念記載の列を用意する（全社分）
for Items in Item_value:  # 行/会社ごとに分析する。会社数の分だけ以下の処理を繰り返す
    for Philosophy in Items:  # 経営理念の文字を取り出す（一社分）
        final = {}  # 最終結果の箱を用意

        SDGs1 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs1:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs1[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs1 = sorted([(k, v) for k, v in SDGs1.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs1"] = key_SDGs1[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs1_len"] = len(sorted([(k, v) for k, v in SDGs1.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs1"] = 999999
            final["SDGs1_len"] = 0

        SDGs2 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs2:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs2[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs2 = sorted([(k, v) for k, v in SDGs2.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs2"] = key_SDGs2[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs2_len"] = len(sorted([(k, v) for k, v in SDGs2.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs2"] = 999999
            final["SDGs2_len"] = 0
            
        SDGs3 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs3:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs3[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs3 = sorted([(k, v) for k, v in SDGs3.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs3"] = key_SDGs3[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs3_len"] = len(sorted([(k, v) for k, v in SDGs3.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs3"] = 999999
            final["SDGs3_len"] = 0
            
        SDGs4 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs4:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs4[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs4 = sorted([(k, v) for k, v in SDGs4.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs4"] = key_SDGs4[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs4_len"] = len(sorted([(k, v) for k, v in SDGs4.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs4"] = 999999
            final["SDGs4_len"] = 0

        SDGs5 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs5:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs5[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs5 = sorted([(k, v) for k, v in SDGs5.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs5"] = key_SDGs5[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs5_len"] = len(sorted([(k, v) for k, v in SDGs5.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs5"] = 999999
            final["SDGs5_len"] = 0
            
        SDGs6 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs6:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs6[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs6 = sorted([(k, v) for k, v in SDGs6.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs6"] = key_SDGs6[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs6_len"] = len(sorted([(k, v) for k, v in SDGs6.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs6"] = 999999
            final["SDGs6_len"] = 0

        SDGs7 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs7:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs7[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs7 = sorted([(k, v) for k, v in SDGs7.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs7"] = key_SDGs7[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs7_len"] = len(sorted([(k, v) for k, v in SDGs7.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs7"] = 999999
            final["SDGs7_len"] = 0
            
        SDGs8 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs8:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs8[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs8 = sorted([(k, v) for k, v in SDGs8.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs8"] = key_SDGs8[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs8_len"] = len(sorted([(k, v) for k, v in SDGs8.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs8"] = 999999
            final["SDGs8_len"] = 0
            
        SDGs9 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs9:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs9[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs9 = sorted([(k, v) for k, v in SDGs9.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs9"] = key_SDGs9[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs9_len"] = len(sorted([(k, v) for k, v in SDGs9.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs9"] = 999999
            final["SDGs9_len"] = 0

        SDGs10 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs10:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs10[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs10 = sorted([(k, v) for k, v in SDGs10.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs10"] = key_SDGs10[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs10_len"] = len(sorted([(k, v) for k, v in SDGs10.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs10"] = 999999
            final["SDGs10_len"] = 0
            
        SDGs11 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs11:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs11[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs11 = sorted([(k, v) for k, v in SDGs11.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs11"] = key_SDGs11[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs11_len"] = len(sorted([(k, v) for k, v in SDGs11.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs11"] = 999999
            final["SDGs11_len"] = 0

        SDGs12 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs12:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs12[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs12 = sorted([(k, v) for k, v in SDGs12.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs12"] = key_SDGs12[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs12_len"] = len(sorted([(k, v) for k, v in SDGs12.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs12"] = 999999
            final["SDGs12_len"] = 0

        SDGs13 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs13:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs13[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs13 = sorted([(k, v) for k, v in SDGs13.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs13"] = key_SDGs13[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs13_len"] = len(sorted([(k, v) for k, v in SDGs13.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs13"] = 999999
            final["SDGs13_len"] = 0

        SDGs14 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs14:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs14[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs14 = sorted([(k, v) for k, v in SDGs14.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs14"] = key_SDGs14[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs14_len"] = len(sorted([(k, v) for k, v in SDGs14.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs14"] = 999999
            final["SDGs14_len"] = 0

        SDGs15 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs15:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs15[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs15 = sorted([(k, v) for k, v in SDGs15.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs15"] = key_SDGs15[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs15_len"] = len(sorted([(k, v) for k, v in SDGs15.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs15"] = 999999
            final["SDGs15_len"] = 0

        SDGs16 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs16:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs16[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs16 = sorted([(k, v) for k, v in SDGs16.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs16"] = key_SDGs16[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs16_len"] = len(sorted([(k, v) for k, v in SDGs16.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs16"] = 999999
            final["SDGs16_len"] = 0
            
        SDGs17 = {}  # 主体_顧客（下流取引先）グループの結果の箱を用意
        for sh in sh_dic_SDGs17:  # 主体_顧客（下流取引先）グループのキーワード一つ一つ、以下の処理を行う
            sh_num = Philosophy.find(sh) + 1  # 経営理念の何文字目にキーワードを言及したかをfind
            SDGs17[sh] = Philosophy.find(sh) + 1  # "お客", "顧客"のように複数言及する場合もあるので、全部箱に入れる
        try:
            key_SDGs17 = sorted([(k, v) for k, v in SDGs17.items() if v > 0], key=lambda x: x[1])[
                0]  # 言及していないキーワードを無視して
            final["SDGs17"] = key_SDGs17[1]  # 複数言及した場合、言及箇所が最初のものを「主体_顧客（下流取引先）」の結果として残す
            # 複数言及した場合、数を数える
            final["SDGs17_len"] = len(sorted([(k, v) for k, v in SDGs17.items() if v > 0], key=lambda x: x[1]))
        except:
            # 一つも言及していない場合は9999999の値を付与する、言及回数は0となる
            final["SDGs17"] = 999999
            final["SDGs17_len"] = 0


        # それぞれのグループの結果を言及した順にソートする、DataFrameを加工して、出力すること
        # final = sorted(final.items(), key=lambda x: x[1])
        final = [final]
        print(final)
        Item = pd.DataFrame(final)
        Item.to_csv(r"C:\Users\Ray94\Downloads\222.csv", mode='a', index=False, header=None)
